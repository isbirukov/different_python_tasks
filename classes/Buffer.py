"""
Вам дается последовательность целых чисел и вам нужно ее обработать и вывести на экран сумму первой пятерки чисел
из этой последовательности, затем сумму второй пятерки, и т. д.

Но последовательность не дается вам сразу целиком.
С течением времени к вам поступают её последовательные части.
Например, сначала первые три элемента, потом следующие шесть, потом следующие два и т. д.

Реализуйте класс Buffer, который будет накапливать в себе элементы последовательности и
выводить сумму пятерок последовательных элементов по мере их накопления.

Одним из требований к классу является то, что он не должен хранить в себе больше элементов,
чем ему действительно необходимо, т. е. он не должен хранить элементы,
которые уже вошли в пятерку, для которой была выведена сумма.

Класс должен иметь следующий вид
class Buffer:
    def __init__(self):
        # конструктор без аргументов

    def add(self, *a):
        # добавить следующую часть последовательности

    def get_current_part(self):
        # вернуть сохраненные в текущий момент элементы последовательности в порядке, в котором они были
        # добавлены
"""


class Buffer:
    def __init__(self):
        self.buff = []

    def add(self, *a):
        # добавить следующую часть последовательности
        self.buff.extend((a))
        while (len(self.buff) > 4):
            print(sum(self.buff[0:5]))
            self.buff = self.buff[5:]


    def get_current_part(self):
        # вернуть сохраненные в текущий момент элементы последовательности в порядке, в котором они были
        # добавлены
        return self.buff


def main():
    b = Buffer()
    b.add(1, 2, 3)
    b.get_current_part()
    b.add(4, 5, 6)
    b.get_current_part()
    b.add(7, 8, 9, 10)
    b.get_current_part()
    b.add(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
    b.get_current_part()


if __name__ == '__main__':
    main()
